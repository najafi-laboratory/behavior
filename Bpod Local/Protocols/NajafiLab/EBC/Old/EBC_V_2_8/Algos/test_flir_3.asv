






% Find available hardware
info = imaqhwinfo;

% Connect to a Video Input
% Camera (example with a 'gentl' device)
vid = videoinput('gentl', 1);

% Configure Video Source Properties
src = getselectedsource(vid);

% Find available info for connected Video Input
imaqhwinfo_vid(vid)

% Set GPIO Line3 as Output
% src.LineSelector = "Line3";
% src.LineMode = "Output";

% Set input trigger lines with callback function to generate logging file
% for sync
% Log timestamp

% View the default logging mode.
currentLoggingMode = vid.LoggingMode;

% Configure the logging mode to disk.
vid.LoggingMode = 'disk';

% Verify the configuration.
currentLoggingMode = vid.LoggingMode;




% Create a VideoWriter object.
EBC_vid_log = VideoWriter('EBC_vid.mp4', 'MPEG-4');

% Configure the video input object to use the VideoWriter object.
vid.DiskLogger = EBC_vid_log;



vidTimer = [];

% Preview the video
% preview(vid);

% Start an acquisition
start(vid);



vid.FramesAcquired
vid.FramesAvailable

% Acquire a single frame from the image acquisition device.
% frame = step()

% Capture the current frame
frame = getsnapshot(vid);
% Show frame
imshow(frame)


% Stop the acquisition
stop(vid);

% Clean up
delete(vid);
delete(src);
imaqreset;
clear;


% Hardware Output Line
% v = videoinput("gentl", 1, "Mono8");
% info = imaqhwinfo(v);
% width_res = info.MaxWidth;
% height_res = info.MaxHeight;
% v.ROIPosition = [width_res/2 height_res/2 1280 1280];
% src = getselectedsource(v);
% src.AutoTargetBrightness = 0.5019608;
% src.ExposureTime = 1000;
% src.LineSelector = "Line3";
% src.LineMode = "Output";
% img = getsnapshot(v);





% Timer Routines
if isempty(vidTimer) || ~isvalid(vidTimer)
    % Create a timer object to grab frames
    vidTimer = timer('ExecutionMode', 'fixedRate', 'Period', 0.1, 'TimerFcn', @updateVideo);
    start(vidTimer);  % Start the timer
end


if ~isempty(vidTimer) && isvalid(vidTimer)
    stop(vidTimer);  % Stop the timer
    delete(vidTimer);  % Delete the timer object
    vidTimer = [];
end