classdef TrialConfig
    methods


%% trial generation

function [TrialTypes] = GenTrials(obj, S)
    TrialTypes = ceil(rand(1, 1106)*2); 
end


function [GrayPerturbISI] = SetPostPertISI( ...
        obj, S, TrialTypes, currentTrial, PostPertISI)
    switch TrialTypes(currentTrial)
        case 1 % trial is left with short ISI
            GrayPerturbISI = S.GUI.ISIOrig_s - PostPertISI;
        case 2 % trial is right with long ISI
            GrayPerturbISI = S.GUI.ISIOrig_s + PostPertISI;
    end
end


%% random isi


function [JitterFlag] = GetJitterFlag( ...
        obj, S)
    if (S.GUI.ActRandomISI == 1)
        JitterFlag = 1;
    else
        JitterFlag = 0;
    end
end


%% change trial difficulty


function [TrialDifficulty] = SamplingDiff( ...
        obj, S)
    % 1 - Easy, 2 - MediumEasy, 3 - MediumHard, 4 - Hard
    DifficultyLevels = [1, 2, 3, 4];
    sum = S.GUI.PercentEasy + S.GUI.PercentMediumEasy + S.GUI.PercentMediumHard + S.GUI.PercentHard;
    FractionEasy = S.GUI.PercentEasy / sum;
    FractionMediumEasy = S.GUI.PercentMediumEasy / sum;
    FractionMediumHard = S.GUI.PercentMediumHard / sum;
    FractionHard = S.GUI.PercentHard / sum;
    DifficultyProbabilities = [FractionEasy, FractionMediumEasy, FractionMediumHard, FractionHard];
    CummuProb = [0, cumsum(DifficultyProbabilities)];
    r = rand;
    ind = find(r>CummuProb, 1, 'last');
    TrialDifficulty = DifficultyLevels(ind);
end


%% anti-bias algorithm

% get valve time from valve amount
function [ValveTime] = Amount2Time( ...
        obj, Amount, Valve)
    ValveTime = GetValveTimes(Amount, Valve);
    if (ValveTime < 0)
        ValveTime = 0;
    end
end


%% ITI and timeout ITI


function [ITI] = GetITI( ...
        obj, S)
    ITI = 19961106;
    if (S.GUI.SetManualITI == 1)
        ITI = S.GUI.ManualITI;
    else
        while (ITI < S.GUI.ITIMin || ITI > S.GUI.ITIMax)
            ITI = -log(rand) * S.GUI.ITIMean;
        end
    end
end


function [TimeOutPunish] = GetTimeOutPunish( ...
        obj, S)
    if (S.GUI.ActTimeOutPunish == 1)
        if (S.GUI.ManuallTimeOutPunish)
            TimeOutPunish = S.GUI.TimeOutPunish;
        else
            switch S.GUI.TrainingLevel
                case 1
                    TimeOutPunish = 1.5;
                case 2
                    TimeOutPunish = 2.0;
                case 3
                    TimeOutPunish = 2.5;
                case 4
                    TimeOutPunish = 3.0;
            end
        end
    else
        TimeOutPunish = 0;
    end
end


%% choice window

function [ChoiceWindow] = GetChoiceWindow( ...
        obj, S)
    if (S.GUI.ManualChoiceWindow)
        ChoiceWindow = S.GUI.ChoiceWindow_s;
    else
        switch S.GUI.TrainingLevel
            case 1
                ChoiceWindow = 15;
            case 2
                ChoiceWindow = 10;
            case 3
                ChoiceWindow = 5;
            case 4
                ChoiceWindow = 5;
        end
    end
end


function [ChangeMindDur] = GetChangeMindDur( ...
        obj, S)
    if (S.GUI.ManuallChangeMindDur)
        ChangeMindDur = S.GUI.ChangeMindDur;
    else
        switch S.GUI.TrainingLevel
            case 1
                ChangeMindDur = 10;
            case 2
                ChangeMindDur = 5;
            case 3
                ChangeMindDur = 0;
            case 4
                ChangeMindDur = 0;
        end
    end
end



%% moving spouts


function SetMotorPos = ConvertMaestroPos(obj, MaestroPosition)
    m = 0.002;
    b = -3;
    SetMotorPos = MaestroPosition * m + b;
end

































    end
end