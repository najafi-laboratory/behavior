function StateNaive(sma, S, SCOA, VisStimDuration, DURA)

    sma = AddState(sma, 'Name', 'Start', ...
        'Timer', 0.068,...
        'StateChangeConditions', {'Tup', 'PreVisStimDelay'},...
        'OutputActions', SCOA.Start);

    sma = AddState(sma, 'Name', 'WrongInitiation', ...
        'Timer', 0,...
        'StateChangeConditions', {'Tup', 'TimeOutPunish'},...         
        'OutputActions', {});     

    sma = AddState(sma, 'Name', 'PreVisStimDelay', ...
        'Timer', S.GUI.PreVisStimDelay_s,...
        'StateChangeConditions', {'Tup', 'VisStimTrigger'},...
        'OutputActions', {});    

    sma = AddState(sma, 'Name', 'VisStimTrigger', ...
        'Timer', 0,...
        'StateChangeConditions', {'BNC1High', 'AudStimTrigger'},...
        'OutputActions', SCOA.VisStim);

    sma = AddState(sma, 'Name', 'AudStimTrigger', ...
        'Timer', 2,...
        'StateChangeConditions', {'Tup', 'NaiveRewardDeliver'},...
        'OutputActions', SCOA.AudStim);

    sma = AddState(sma, 'Name', 'NaiveRewardDeliver', ...
        'Timer', 1,...
        'StateChangeConditions', {'Tup', 'WindowChoice'},...
        'OutputActions', {'Valve2', 1});
    
    sma = AddState(sma, 'Name', 'WindowChoice', ...
        'Timer', DURA.ChoiceWindow,...
        'StateChangeConditions', { ...
            'Tup', 'PunishSetup', ...
            'Port2In', 'RewardNaive'},...
        'OutputActions', {});

    sma = AddState(sma, 'Name', 'RewardNaive', ...
        'Timer', 0,...
        'StateChangeConditions', {'Tup', 'PostRewardDelay'},...
        'OutputActions', {});

    sma = AddState(sma, 'Name', 'PostRewardDelay', ...
        'Timer', S.GUI.PostRewardDelay_s,...
        'StateChangeConditions', {'Tup', 'ITI'},...
        'OutputActions', {});

    sma = AddState(sma, 'Name', 'DidNotChoose', ...
        'Timer', 0,...
        'StateChangeConditions', {'Tup', 'PunishSetup'},...
        'OutputActions', {});

    sma = AddState(sma, 'Name', 'PunishSetup', ...
        'Timer', 0,...
        'StateChangeConditions', {'Tup', 'PunishNaive'},...
        'OutputActions', SCOA.Punish);

    sma = AddState(sma, 'Name', 'PunishNaive', ...
        'Timer', S.GUI.NoiseDuration_s,...
        'StateChangeConditions', {'Tup', 'TimeOutPunish'},...
        'OutputActions', SCOA.Punish);

    sma = AddState(sma, 'Name', 'TimeOutPunish', ...
        'Timer', DURA.TimeOutPunish,...
        'StateChangeConditions', {'Tup', 'ITI'},...
        'OutputActions', {});

    sma = AddState(sma, 'Name', 'ITI', ...
        'Timer', DURA.ITI,...
        'StateChangeConditions', {'Tup', '>exit'},...
        'OutputActions', {'SoftCode', 254, 'HiFi1', 'X'});

    SendStateMachine(sma);
end