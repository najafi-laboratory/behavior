classdef OptoConfig
   properties
      EnableOpto = 0;
      ComputerHostName = '';
      Rig = '';
   end

    methods   

        function obj = OptoConfig(EnableOpto)
            if nargin == 1
                obj.EnableOpto = EnableOpto;
            end
        end

        function obj = set.EnableOpto(obj, EnableOpto)
            obj.EnableOpto = EnableOpto;
        end

        function [OptoTrialTypes] = GenOptoTrials(obj, BpodSystem, S)
            BpodSystem.Data.PreviousSessionType = S.GUI.SessionType;
            BpodSystem.Data.PreviousOptoTrialTypeSeq = S.GUI.OptoTrialTypeSeq;
            BpodSystem.Data.PreviousOnFraction = S.GUI.OnFraction;
            BpodSystem.Data.PreviousNumOptoTrialsPerBlock = S.GUI.NumOptoTrialsPerBlock;
            OptoTrialTypes = ceil(rand(1, S.GUI.MaxTrials)*2);
        end

        function [OptoTrialTypes] = UpdateOptoTrials(obj, BpodSystem, S, OptoTrialTypes, TrialTypes, currentTrial, forceUpdate)
            updateOptoTrialTypeSequence = 0;

            if forceUpdate == 1
                updateOptoTrialTypeSequence = 1;
            end
        
            if S.GUI.SessionType == 2
                    S.GUI.OptoTrialTypeSeq = 1;
                    S.GUI.OnFraction = 0;
                    updateOptoTrialTypeSequence = 1;
            end

            if (BpodSystem.Data.PreviousSessionType ~= S.GUI.SessionType) && (S.GUI.SessionType == 1)
                updateOptoTrialTypeSequence = 1;           
            end
            BpodSystem.Data.PreviousSessionType = S.GUI.SessionType;

            if BpodSystem.Data.PreviousOptoTrialTypeSeq ~= S.GUI.OptoTrialTypeSeq
                updateOptoTrialTypeSequence = 1;
            end
            BpodSystem.Data.PreviousOptoTrialTypeSeq = S.GUI.OptoTrialTypeSeq;

            if BpodSystem.Data.PreviousNumOptoTrialsPerBlock ~= S.GUI.NumOptoTrialsPerBlock
                updateOptoTrialTypeSequence = 1;
                BpodSystem.Data.PreviousNumOptoTrialsPerBlock = S.GUI.NumOptoTrialsPerBlock;
            end

            if BpodSystem.Data.PreviousOnFraction ~= S.GUI.OnFraction
                updateOptoTrialTypeSequence = 1;
                BpodSystem.Data.PreviousOnFraction = S.GUI.OnFraction;
            end

            if obj.EnableOpto
                if updateOptoTrialTypeSequence                
                    numTrialsAddedToSequence = 0;
                    OptoTrialTypesToAdd = [];
                    switch S.GUI.OptoTrialTypeSeq
                        case 1 % interleaved - random
                            numOnTrialsToAdd = [];
                            OptoTrialTypesToAdd = [repmat(1, 1, S.GUI.MaxTrials - currentTrial + 1)];
                            numOnTrialsToAdd = ceil(S.GUI.OnFraction * length(OptoTrialTypesToAdd));
                            numOnTrialsToAdd_idxs = randperm(length(OptoTrialTypesToAdd), numOnTrialsToAdd);
                            OptoTrialTypesToAdd(numOnTrialsToAdd_idxs) = 2;
                            OptoTrialTypes(currentTrial:end) = OptoTrialTypesToAdd;
                        case 2 % interleaved - random first block
                            FirstTrialType = ceil(rand(1,1)*2);
                            switch FirstTrialType
                                case 1 % on first
                                    SecondTrialType = 2;
                                case 2 % off first
                                    SecondTrialType = 1;
                            end
                            while numTrialsAddedToSequence < S.GUI.MaxTrials
                                OptoTrialTypesToAdd = [OptoTrialTypesToAdd repmat(FirstTrialType, 1, S.GUI.NumOptoTrialsPerBlock) repmat(SecondTrialType, 1, S.GUI.NumOptoTrialsPerBlock)];
                                numTrialsAddedToSequence = numTrialsAddedToSequence + 2*S.GUI.NumOptoTrialsPerBlock;
                            end
                            OptoTrialTypes(currentTrial:end) = OptoTrialTypesToAdd(1:length(OptoTrialTypes) - currentTrial + 1);
                        case 3 % interleaved - off first block
                            while numTrialsAddedToSequence < S.GUI.MaxTrials
                                OptoTrialTypesToAdd = [OptoTrialTypesToAdd repmat(1, 1, S.GUI.NumOptoTrialsPerBlock) repmat(2, 1, S.GUI.NumOptoTrialsPerBlock)];
                                numTrialsAddedToSequence = numTrialsAddedToSequence + 2*S.GUI.NumOptoTrialsPerBlock;
                            end
                            OptoTrialTypes(currentTrial:end) = OptoTrialTypesToAdd(1:length(OptoTrialTypes) - currentTrial + 1);
                        case 4 % interleaved - on first block
                            while numTrialsAddedToSequence < S.GUI.MaxTrials
                                OptoTrialTypesToAdd = [OptoTrialTypesToAdd repmat(2, 1, S.GUI.NumOptoTrialsPerBlock) repmat(1, 1, S.GUI.NumOptoTrialsPerBlock)];
                                numTrialsAddedToSequence = numTrialsAddedToSequence + 2*S.GUI.NumOptoTrialsPerBlock;
                            end
                            OptoTrialTypes(currentTrial:end) = OptoTrialTypesToAdd(1:length(OptoTrialTypes) - currentTrial + 1);
                        case 5 % on epoch
                            %  NOTE: currently only works if setting when
                            %  starting session, but not if changing params
                            EpochStartIdxs = [1, (find(abs(diff(TrialTypes)) == 1) + 1), (S.GUI.MaxTrials + 1)];
                            BlockLengths = [diff(EpochStartIdxs) (S.GUI.MaxTrials - EpochStartIdxs(end))];
                            BlockEpochIdx = 1;
                            while numTrialsAddedToSequence < S.GUI.MaxTrials
                                if BlockEpochIdx == length(BlockLengths)
                                    disp('debug');
                                end
                                numOpto = S.GUI.EpochTrialStop;
                                if numOpto > BlockLengths(BlockEpochIdx)
                                    numOpto = BlockLengths(BlockEpochIdx);
                                end
                                numNonOpto = BlockLengths(BlockEpochIdx) - S.GUI.EpochTrialStop;
                                if numNonOpto < 1
                                    numNonOpto = 0;
                                end
                                OptoTrialTypesToAdd = [OptoTrialTypesToAdd repmat(2, 1, numOpto) repmat(1, 1, numNonOpto)];
                                numTrialsAddedToSequence = numTrialsAddedToSequence + numOpto + numNonOpto;
                                BlockEpochIdx = BlockEpochIdx + 1;
                            end
                            OptoTrialTypes(currentTrial:end) = OptoTrialTypesToAdd(1:length(OptoTrialTypes) - currentTrial + 1);
                    end
                end
            else
                OptoTrialTypes(currentTrial:end) = 1;
            end
        end

        function [sma] = InsertGlobalTimer(obj, BpodSystem, sma, S, VisStim, PressVisDelay_s)
            if obj.EnableOpto 
                % shutter close delays
                ShutterPulseWidthAdd = 0.003; % add 3ms to PMTCloseDelay for shutter to re-open
                PMTStartCloseDelay = 0.010;
                PMTCloseTransferDelay = 0.0121;
                PMTCloseDelay = PMTStartCloseDelay + PMTCloseTransferDelay;
                PMTMin5VSignalDur = PMTCloseDelay + ShutterPulseWidthAdd; % ~25.1ms, minimum measured duration of 5V shutter signal for shutter to re-open 

                % shutter open delays
                % PMTStartOpenDelay = 0.0078;
                PMTStartOpenDelay = 0.000;  % setting to zero to prevent pmt damage, red channel shutter seems to open a bit faster than specs
                PMTOpenTransferDelay = 0.0125;
                
                % scope 3-frame segment dur
                ScopeFrameDuration = 0.033;

                % initial gray frame vis stim offset, statistical delay of
                % 2 frames at 60fps
                switch BpodSystem.Data.RigName
                    case 'ImagingRig'
                        VisStimShift = 0.0329645; % f1 + f2 - imaging rig
                        VisStimDurationOffset = 0.0014; % ~measured vis stim offset from 100ms
                    case 'JoystickRig1'
                        % VisStimShift = 0.031698; % f1 + f2 - joystick rig
                        f1 = 0.0153655; % gray f1 dur
                        f2 = 0.0176069; % gray f2 dur
                        VisStimShift = f1 + f2; % f1 + f2 - joystick rig
                        VisStimDurationOffset = 0.0014; % ~measured vis stim offset from 100ms
                    case 'JoystickRig2'
                        % VisStimShift = 0.031698; % f1 + f2 - joystick rig
                        % f1 = 0.0153655; % gray f1 dur
                        % f2 = 0.0176069; % gray f2 dur
                        % VisStimShift = f1 + f2; % f1 + f2 - joystick rig
                        % VisStimDurationOffset = 0.0014; % ~measured vis stim offset from 100ms                        
                end

                LED1OnsetDelay = 0;
                LED2OnsetDelay = 0;  
                LED3OnsetDelay = 0; 
                LED4OnsetDelay = 0;

                PMT1OnsetDelay = 0;
                PMT2OnsetDelay = 0;
                PMT3OnsetDelay = 0;
                PMT4OnsetDelay = 0;

                % bpod timer loop limit
                MaxLoopNum = 255;
                MinLoopIncrement = S.GUI.MaxOptoDur_s/MaxLoopNum;

                if S.GUI.OptoVis1
                    LED1OnsetDelay = VisStimShift;
                    PMT1OnsetDelay = LED1OnsetDelay - PMTCloseDelay;
                end

                if ~S.GUI.OptoVis1 && S.GUI.OptoWaitForPress1
                    LED1OnsetDelay = VisStim.VisStimDuration - VisStimDurationOffset;
                    PMT1OnsetDelay = LED1OnsetDelay - PMTCloseDelay;
                end

                if S.GUI.OptoVis2
                    LED2OnsetDelay = VisStimShift;
                    PMT2OnsetDelay = LED2OnsetDelay - PMTCloseDelay;
                end

                if ~S.GUI.OptoVis2 && S.GUI.OptoWaitForPress2
                    LED2OnsetDelay = VisStim.VisStimDuration - VisStimDurationOffset;
                    PMT2OnsetDelay = LED2OnsetDelay - PMTCloseDelay;
                end

                if S.GUI.SelfTimedMode
                    LED2OnsetDelay = PMTCloseDelay;
                    if ~S.GUI.OptoPrePressDelay
                        LED2OnsetDelay = LED2OnsetDelay + PressVisDelay_s;
                    end
                    PMT2OnsetDelay = LED2OnsetDelay - PMTCloseDelay;                    
                end          

                if S.GUI.OptoPrePressDelay
                    LED3OnsetDelay = PMTCloseDelay;
                    PMT3OnsetDelay = LED3OnsetDelay - PMTCloseDelay;
                end

                LED4OnsetDelay = PMTCloseDelay;
                PMT4OnsetDelay = LED4OnsetDelay - PMTCloseDelay;

                switch S.GUI.PulseType
                    case 1
                        LoopLED1 = 0;
                        LoopLED2 = 0;
                        LoopPMT1 = 0;
                        LoopPMT2 = 0;

                        LEDOnDur = round(S.GUI.MaxOptoDur_s, 4);
                        LEDOffDur = 0;

                        PMTOffDur = 0;
                        PMTCloseDur = round(S.GUI.MaxOptoDur_s + PMTCloseDelay - PMTStartOpenDelay, 4);

                    case 2
                        LEDOnDur = S.GUI.LEDOnPulseDur_ms/1000;
                        LEDOffDur = S.GUI.LEDOffPulseDur_ms/1000;
                        T = LEDOnDur + LEDOffDur;

                        % add fix to calculation for square wave shutter close dur 

                        % get integer number of loops for LED cycles to be
                        % within max opto dur
                        LoopLED1 = floor((S.GUI.MaxOptoDur_s/(LEDOnDur+LEDOffDur)));
                        LoopLED2 = LoopLED1;
                        LoopPMT1 = 0;
                        LoopPMT2 = 0;
                       
                        TimeFromLEDOffset = S.GUI.MaxOptoDur_s - ((T * LoopLED1) - LEDOffDur);

                        PMTCloseDur = round(S.GUI.MaxOptoDur_s + PMTCloseDelay - PMTStartOpenDelay - TimeFromLEDOffset, 4);
                        PMTOffDur = 0;                        
                    case 3
                        LEDOnDur = S.GUI.LEDOnPulseDur_ms/1000;
                        LEDOffDur = S.GUI.LEDOffPulseDur_ms/1000;
                        
                        % general case is max integer number of loops
                        % within maxopto constraint
                        LoopNum = floor((S.GUI.MaxOptoDur_s/(LEDOnDur+LEDOffDur)));
                        if LoopNum == 1
                            LoopNum = 0;
                        end                        
                        
                        LoopLED1 = LoopNum;
                        LoopLED2 = LoopNum;
                        LoopLED3 = LoopNum;
                        LoopLED4 = LoopNum;
                        
                        LoopPMT1 = LoopNum;
                        LoopPMT2 = LoopNum;
                        LoopPMT3 = LoopNum;
                        LoopPMT4 = LoopNum;

                        if S.GUI.OptoVis1 && ~S.GUI.OptoWaitForPress1
                            OptoMax = min(S.GUI.MaxOptoDur_s, VisStim.VisStimDuration);
                            LoopNum = floor((OptoMax/(LEDOnDur+LEDOffDur)));
                            if LoopNum == 1
                                LoopNum = 0;
                            end 
                            LoopLED1 = LoopNum;
                            LoopPMT1 = LoopNum;
                        end
                        
                        if ~S.GUI.SelfTimedMode
                            % if vis-guided, constrain loops to an integer
                            % number within vis stim
                            if S.GUI.OptoVis2 && ~S.GUI.OptoWaitForPress2
                                OptoMax = min(S.GUI.MaxOptoDur_s, VisStim.VisStimDuration);
                                LoopNum = floor((OptoMax/(LEDOnDur+LEDOffDur)));
                                if LoopNum == 1
                                    LoopNum = 0;
                                end 
                                LoopLED2 = LoopNum;
                                LoopPMT2 = LoopNum;
                            end
                        else
                            % if self-timed, constrain loops to an integer
                            % number within
                            if ~S.GUI.OptoWaitForPress2
                                OptoMax = min(S.GUI.MaxOptoDur_s, PressVisDelay_s);
                                LoopNum = floor((OptoMax/(LEDOnDur+LEDOffDur)));
                                if LoopNum == 1
                                    LoopNum = 0;
                                end 
                                LoopLED2 = LoopNum;
                                LoopPMT2 = LoopNum;                                
                            end
                        end

                        % if waitforpress2 inactive, prepressdelay opto
                        % should be integer number of loops in
                        % prepress2delay
                        if ~S.GUI.OptoWaitForPress2
                            OptoMax = min(S.GUI.MaxOptoDur_s, PressVisDelay_s);
                            LoopNum = floor((PressVisDelay_s/(LEDOnDur+LEDOffDur)));
                            if LoopNum == 1
                                LoopNum = 0;
                            end
                            LoopLED3 = LoopNum;
                            LoopPMT3 = LoopNum; 
                        end
                       
                        PMTCloseDur = PMTCloseDelay;
                        % if the LED is on for longer than the shutter StartOpenDelay,
                        % then increase shutter 5V duration by the difference (PS_LEDOnPulseDur - PMTStartOpenDelay)
                        if LEDOnDur > PMTStartOpenDelay
                            PMTCloseDur = PMTCloseDur + (LEDOnDur - PMTStartOpenDelay);
                        end
                        % if shutter duration is less than the minimum dur for the
                        % shutter to re-open, set it to minimum shutter pulse dur
                        PMTCloseDur = max(PMTCloseDur, PMTMin5VSignalDur);

                        % duration of LED pulse 0V is cycle period minus 5V dur
                        T = LEDOnDur + LEDOffDur;
                        PMTOffDur =  T - PMTCloseDur;
                end 

                % seg1:
                % vis1 and/or wait1: timer 1 and 5: '000010001'
                %
                % seg delay:
                % gap delay: timer 4 and 6: '000101000'
                %
                % seg2:
                % vis2 and/or wait2: timer 3 and 7: '001000100'
                %
                % LED timers
                % seg 1
                sma = SetGlobalTimer(sma, 'TimerID', 1, 'Duration', LEDOnDur, 'OnsetDelay', LED1OnsetDelay,...
                    'Channel', 'PWM1', 'OnLevel', 255, 'OffLevel', 0,...
                    'Loop', LoopLED1, 'SendGlobalTimerEvents', 0, 'LoopInterval', LEDOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);

                % seg delay
                sma = SetGlobalTimer(sma, 'TimerID', 4, 'Duration', LEDOnDur, 'OnsetDelay', LED3OnsetDelay,...
                    'Channel', 'PWM1', 'OnLevel', 255, 'OffLevel', 0,...
                    'Loop', LoopLED3, 'SendGlobalTimerEvents', 0, 'LoopInterval', LEDOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);                

                % seg 2
                sma = SetGlobalTimer(sma, 'TimerID', 3, 'Duration', LEDOnDur, 'OnsetDelay', LED2OnsetDelay,...
                    'Channel', 'PWM1', 'OnLevel', 255, 'OffLevel', 0,...
                    'Loop', LoopLED2, 'SendGlobalTimerEvents', 0, 'LoopInterval', LEDOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);

                % press1/press2
                sma = SetGlobalTimer(sma, 'TimerID', 8, 'Duration', LEDOnDur, 'OnsetDelay', LED4OnsetDelay,...
                    'Channel', 'PWM1', 'OnLevel', 255, 'OffLevel', 0,...
                    'Loop', LoopLED4, 'SendGlobalTimerEvents', 0, 'LoopInterval', LEDOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);

                
    
                

                % shutter timers
                % seg 1
                sma = SetGlobalTimer(sma, 'TimerID', 5, 'Duration', PMTCloseDur, 'OnsetDelay', PMT1OnsetDelay,...
                    'Channel', 'BNC2', 'OnLevel', 1, 'OffLevel', 0,...
                    'Loop', LoopPMT1, 'SendGlobalTimerEvents', 0, 'LoopInterval', PMTOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);     
                
                % seg delay
                sma = SetGlobalTimer(sma, 'TimerID', 6, 'Duration', PMTCloseDur, 'OnsetDelay', PMT3OnsetDelay,...
                    'Channel', 'BNC2', 'OnLevel', 1, 'OffLevel', 0,...
                    'Loop', LoopPMT3, 'SendGlobalTimerEvents', 0, 'LoopInterval', PMTOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);    

                % seg 2
                sma = SetGlobalTimer(sma, 'TimerID', 7, 'Duration', PMTCloseDur, 'OnsetDelay', PMT2OnsetDelay,...
                    'Channel', 'BNC2', 'OnLevel', 1, 'OffLevel', 0,...
                    'Loop', LoopPMT2, 'SendGlobalTimerEvents', 0, 'LoopInterval', PMTOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0); 

                % press1/press2
                sma = SetGlobalTimer(sma, 'TimerID', 9, 'Duration', PMTCloseDur, 'OnsetDelay', PMT4OnsetDelay,...
                    'Channel', 'BNC2', 'OnLevel', 1, 'OffLevel', 0,...
                    'Loop', LoopPMT4, 'SendGlobalTimerEvents', 0, 'LoopInterval', PMTOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);                 

                % shutter reset timer
                sma = SetGlobalTimer(sma, 'TimerID', 2, 'Duration', 0.030, 'OnsetDelay', 0,...
                    'Channel', 'BNC2', 'OnLevel', 1, 'OffLevel', 0,...
                    'Loop', 0, 'SendGlobalTimerEvents', 0, 'LoopInterval', 0,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);    

                %%%%%%%%%%%%%%% ITI %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                % find max number of pulses within ITI dur
                MaxNumPulses = floor(BpodSystem.Data.EndOfTrialITI / (LEDOnDur + LEDOffDur));
                MaxNumPulses = min(MaxNumPulses, MaxLoopNum);

                
                switch S.GUI.OptoITICycleType
                    case 1
                        NumPulses = min(S.GUI.OptoITINumPulses, MaxNumPulses);
                    case 2
                        ITIPulseCycleDuration = min(S.GUI.OptoITIDur_s, BpodSystem.Data.EndOfTrialITI);
                        NumPulses = round(ITIPulseCycleDuration / (LEDOnDur + LEDOffDur));
                        NumPulses = min(NumPulses, MaxNumPulses);
                end
                       
                
                switch NumPulses
                    % if 0, then set opto to loop continuously
                    case 0
                        LoopLED5 = 1;
                        ITIPulseCycleDuration = BpodSystem.Data.EndOfTrialITI;
                    % if 1, then single opto pulse
                    case 1
                        LoopLED5 = 0;
                        ITIPulseCycleDuration = (LEDOnDur + LEDOffDur);
                    % otherwise, set integer number of pulses > 1
                    otherwise
                        % LoopLED5 = S.GUI.OptoITINumPulses;
                        LoopLED5 = NumPulses;
                        ITIPulseCycleDuration = (LEDOnDur + LEDOffDur) * NumPulses;
                        ITIPulseCycleDuration = min(ITIPulseCycleDuration, BpodSystem.Data.EndOfTrialITI);
                end

                % align ITI opto to start or stop of ITI state
                if S.GUI.OptoITIAlignment == 1
                    LED5OnsetDelay = 0;
                else
                    LED5OnsetDelay = BpodSystem.Data.EndOfTrialITI - ITIPulseCycleDuration;
                end

                % timer 10-13 used elsewhere in proto
                sma = SetGlobalTimer(sma, 'TimerID', 14, 'Duration', LEDOnDur, 'OnsetDelay', LED5OnsetDelay,...
                    'Channel', 'PWM1', 'OnLevel', 255, 'OffLevel', 0,...
                    'Loop', LoopLED5, 'SendGlobalTimerEvents', 0, 'LoopInterval', LEDOffDur,...
                    'GlobalTimerEvents', 0, 'OffsetValue', 0);



            end
        end
    end
end
