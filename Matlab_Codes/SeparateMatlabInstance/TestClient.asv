
BpodSystem.PluginObjects.V = [];
BpodSystem.PluginObjects.V.SyncPatchIntensity = 255; % increased, seems 140 doesn't always trigger BNC high

Ysize = BpodSystem.PluginObjects.V.ViewPortDimensions(2);
Xsize = BpodSystem.PluginObjects.V.ViewPortDimensions(1);

% compute grating according to square grid of largest pixel dimension
if Ysize > Xsize
    gratingSize = [Ysize, Ysize]; % Size of grating in pixels
else
    gratingSize = [Xsize, Xsize]; % Size of grating in pixels
end

spatialFreq = .005; % Spatial frequency of grating in cycles per pixel
% spatialFreq = .32; % Spatial frequency of grating in cycles per pixel
orientation = 0; % Orientation of grating in degrees
contrast = 1; % Contrast of grating (0 to 1)
phase = 0.5;

% Calculate the parameters needed for the grating
pixPerCycle = 1 / spatialFreq;
freqPerPixel = 1 / pixPerCycle;

[x, y] = meshgrid(1:gratingSize(1), 1:gratingSize(2));

gray = 0.5 * ones(gratingSize);
sinGrating = gray + contrast/2 .* sin(freqPerPixel * 2 * pi * (cos(orientation * pi / 180) * x + sin(orientation * pi / 180) * y) + phase);
sinGrating(sinGrating > 1) = 1; % Cap values above 1 to 1 (white)
sinGrating(sinGrating < 0) = 0; % Cap values below 0 to 0 (black)

gray = gray(1:Ysize, 1:Xsize); % clip to monitor
sinGrating = sinGrating(1:Ysize, 1:Xsize); % clip to monitor

% these images are 0 - 1 amplitude, fine for grating_flashes.m file but need to be 0 - 255 for
% building video this way
gray = gray * 255;
sinGrating = sinGrating * 255;

% S.GUI.GratingDur_s = 2.00; % Duration of grating stimulus in seconds
% S.GUI.ISIOrig_s = 1.0; % Duration of *fixed* gray screen stimulus in seconds

FramesPerSecond = BpodSystem.PluginObjects.V.DetectedFrameRate;

GratingDuration = S.GUI.GratingDur_s; % set duration of grating to stimulus interval
GrayFixedDuration = S.GUI.ISIOrig_s; % set duration of gray screen to inter stimulus interval

% GratingFrames = FramesPerSecond * GratingDuration;
% GrayFixedFrames = FramesPerSecond * GrayFixedDuration;

% GratingDuration = 0.09;
% GrayFixedDuration = 0.11;

% need an integer number of frames, there is no fractional frame
% need an even number of frames for sync patch to alternate
GratingFrames = convergent(FramesPerSecond * GratingDuration);  % maybe use floor for this? then continue to round up below?
if (mod(GratingFrames, 2) ~= 0)
    GratingFrames = GratingFrames + 1; % round up to nearest even integer
end
GratingDuration = GratingFrames / FramesPerSecond; % convert even rounded number of frames back into duration to calculate video duration

GrayFixedFrames = convergent(FramesPerSecond * GrayFixedDuration);
if (mod(GrayFixedFrames, 2) ~= 0)
    GrayFixedFrames = GrayFixedFrames + 1; % round up to nearest even integer
end
GrayFixedDuration = GrayFixedFrames / FramesPerSecond; % convert even rounded number of frames back into duration to calculate video duration

    % GrayPerturbFrames = convergent(FramesPerSecond * GrayPerturbDuration);
    % if (mod(GrayPerturbFrames, 2) ~= 0)
    %     GrayPerturbFrames = GrayPerturbFrames + 1; % round up to nearest even integer
    % end

 
VideoGrating = repmat(sinGrating, 1, 1, 2); % 2 frames to get sync signal encoded
VideoGrayFixed = repmat(gray, 1, 1, 2); % 2 frames to get sync signal encoded

BpodSystem.PluginObjects.V.loadVideo(1, VideoGrating);
BpodSystem.PluginObjects.V.loadVideo(2, VideoGrayFixed);

% compose grating video
GratingFrame_SyncW = BpodSystem.PluginObjects.V.Videos{1}.Data(1);
GratingFrame_SyncBlk = BpodSystem.PluginObjects.V.Videos{1}.Data(2);
GratingBlank = BpodSystem.PluginObjects.V.Videos{1}.Data(3);

%GratingPattern = [GratingFrame_SyncW GratingFrame_SyncBlk];
GratingPattern = [GratingFrame_SyncW GratingFrame_SyncW];

%GratingVideo = [repmat(GratingPattern, 1, GratingFrames/2) GratingBlank];
GratingVideo = [repmat(GratingPattern, 1, GratingFrames/2)];

BpodSystem.PluginObjects.V.Videos{3} = struct;
BpodSystem.PluginObjects.V.Videos{3}.nFrames = GratingFrames + 1; % + 1 for final frame
BpodSystem.PluginObjects.V.Videos{3}.Data = [GratingVideo GratingBlank];

% debug to check individual frames by loading them as a video to play on
% vis stim monitor
% BpodSystem.PluginObjects.V.Videos{6} = struct;
% BpodSystem.PluginObjects.V.Videos{6}.nFrames = 1; % + 1 for final frame
% BpodSystem.PluginObjects.V.Videos{6}.Data = GratingFrame_SyncW;
% BpodSystem.PluginObjects.V.play(6);
% BpodSystem.PluginObjects.V.stop;

% compose gray video, fixed ISI
GrayFrame_SyncW = BpodSystem.PluginObjects.V.Videos{2}.Data(1);
GrayFrame_SyncBlk = BpodSystem.PluginObjects.V.Videos{2}.Data(2);
GrayBlank = BpodSystem.PluginObjects.V.Videos{2}.Data(3);

%GrayPattern = [GrayFrame_SyncW GrayFrame_SyncBlk];
GrayPattern = [GrayFrame_SyncBlk GrayFrame_SyncBlk];

%GrayVideo = [repmat(GrayPattern, 1, GrayFixedFrames/2) GrayBlank];
GrayVideo = [repmat(GrayPattern, 1, GrayFixedFrames/2)];

% update durations based on number of frames generated
GratingDur = length(GratingVideo) * (1/FramesPerSecond);
GrayDur = length(GrayVideo) * (1/FramesPerSecond);

BpodSystem.PluginObjects.V.Videos{4} = struct;
BpodSystem.PluginObjects.V.Videos{4}.nFrames = GrayFixedFrames + 1; % + 1 for final frame
BpodSystem.PluginObjects.V.Videos{4}.Data = [GrayVideo GrayBlank];

VideoPrePerturbPattern = [GratingVideo GrayVideo]; % base video pattern for initial segment repetitions of grating->gray

VideoData = [repmat(VideoPrePerturbPattern, 1, S.GUI.NumISIOrigRep) GratingVideo]; % add one more grating video after initial repetitions

PrePerturbDur = (GratingDuration + GrayFixedDuration) * S.GUI.NumISIOrigRep + GratingDuration;

BpodSystem.PluginObjects.V.Videos{5} = struct;
BpodSystem.PluginObjects.V.Videos{5}.nFrames = length(VideoData) + 1; % + 1 for final frame
BpodSystem.PluginObjects.V.Videos{5}.Data = [VideoData GratingBlank];



%% x-fer code

Port = 2;
T = [];
while isempty(T) && ~KbCheck
    pause(1.0);
    try
        T = TCPCom('localhost', Port);
    catch err
        disp("could not connect to surfer")
    end 
end

i = 1;
while ~KbCheck
    % Abort demo if any key is pressed:
    % if KbCheck
    %     break;
    % end

    T.write([1 [length(VideoData) 8 3] 2 ]);
    disp(['i:', num2str(i)]);
    i = i + 1;
    

    pause(2.0);
end

clear T;